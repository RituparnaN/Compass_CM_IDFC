package com.quantumdataengines.app.compass.util.fatca;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.quantumdataengines.app.compass.util.fatca.errorfile.FATCAFileErrorNotificationType;
import com.quantumdataengines.app.compass.util.fatca.validfile.FieldErrorGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMessageSpecGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileProcessingDataGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.FATCARecordErrorDetailGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.FATCARecordErrorFIGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.FATCARecordErrorGrpType;
import com.quantumdataengines.app.compass.util.fatca.validfile.FATCAValidFileNotificationType;

@Component
public class IRSNotificationPDF {
	
	@Value("${compass.aml.paths.segoeUISemiboldPath}")
	private String segoeUISemiboldPath;
	
	private PdfPCell getPCell(String string, Font font, float paddingBottom, int colspan){
		PdfPCell pcell = new PdfPCell();
		pcell.setBorder(Rectangle.BOX);
		pcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		pcell.setPaddingBottom(paddingBottom);
    	pcell.setColspan(colspan);
    	pcell.addElement(new Paragraph(string, font));
    	return pcell;
	}
	
	private String changeDateFormat(String dateString, String format){
		String returnDateString = "";
		try{
			SimpleDateFormat sdf1 = new SimpleDateFormat(format);
			SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
			java.util.Date date = sdf1.parse(dateString);
			returnDateString = sdf2.format(date);
		}catch(Exception e){
			e.printStackTrace();
		}
		return returnDateString;
	}

	private String toDate(javax.xml.datatype.XMLGregorianCalendar calendar){
		java.util.Date date = calendar.toGregorianCalendar().getTime();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
	    return sdf.format(date);
	}
		
	public void generateNotificationPDF(String caseNo){
		Document document = null;
		PdfWriter writer = null;
		OutputStream file = null;
		try{
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
			BaseFont base = BaseFont.createFont(segoeUISemiboldPath, BaseFont.WINANSI, true);
			FATCAFileGeneration fatcaFileGeneration = FATCAReportingStatus.getFATCAFileGeneration(caseNo);
			String irsNotificationPDF = fatcaFileGeneration.getCaseFolderPath()+File.separator+"IRS_Notification.pdf";
			file = new FileOutputStream(irsNotificationPDF);
			 
            document = new Document();
            writer = PdfWriter.getInstance(document, file);
            
            document.addAuthor(fatcaFileGeneration.getGeneratedBy());
            document.addCreationDate();
            document.setPageSize(PageSize.A4);
            document.addCreator("Compass AML");
            document.addTitle("IRS Notification");
            document.addSubject("IRS Notification generated from Compass for case no : "+caseNo);            
            document.setMargins(15, 15, 15, 15);
            document.setMarginMirroringTopBottom(true);
 
            document.open();                        
            
            PdfContentByte canvas = writer.getDirectContent();
            Rectangle rect = new Rectangle(10, 10, 585, 832);
            rect.setBorder(Rectangle.BOX);
            rect.setBorderWidth(0.5f);
            canvas.setColorStroke(BaseColor.DARK_GRAY);
            canvas.rectangle(rect);            
            canvas.stroke();
            
            
            Paragraph paragraph = new Paragraph("IRS Notification", new Font(base, 12f, Font.NORMAL));
            document.add(paragraph);
            
            paragraph = new Paragraph("for Compass case no : "+caseNo+" generated by "+fatcaFileGeneration.getGeneratedBy()+" on "+sdf.format(new Date()), new Font(base, 5f, Font.NORMAL));
            document.add(paragraph);

            Font blackFont = new Font(base, 6f, Font.NORMAL);
            blackFont.setColor(BaseColor.BLACK);
            
            Font redFont = new Font(base, 6f, Font.NORMAL);
            redFont.setColor(BaseColor.RED);
            
            Font greenFont = new Font(base, 6f, Font.NORMAL);
            greenFont.setColor(new CMYKColor(0.86f, 0.00f, 0.60f, 0.45f));
            
            Font blueFont = new Font(base, 6f, Font.NORMAL);
            blueFont.setColor(BaseColor.BLUE);
            
            PdfPTable notificationTable = new PdfPTable(2);
            notificationTable.setSpacingBefore(10f);
            notificationTable.setWidths(new int[]{20, 80});            
            notificationTable.setWidthPercentage(100.0f);
            
            
            if(fatcaFileGeneration.isPlayloadRead()){            	
            	if(FATCAValidFileNotificationType.class.equals(fatcaFileGeneration.getIRSNotificationType())){
            		JAXBContext jaxbContext = JAXBContext.newInstance(FATCAValidFileNotificationType.class);
    		        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
    		        JAXBElement<FATCAValidFileNotificationType> jaxbElement = 
    		        		jaxbUnmarshaller.unmarshal(new StreamSource(fatcaFileGeneration.getIRSPayloadReadFile()), FATCAValidFileNotificationType.class);
    		        FATCAValidFileNotificationType fatcaValidFileNotificationType = jaxbElement.getValue();
            		
    		        com.quantumdataengines.app.compass.util.fatca.validfile.FATCANotificationHeaderGrpType fatcaNotificationHeaderGrp = fatcaValidFileNotificationType.getFATCANotificationHeaderGrp();
    		        com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMetadataGrpType originalFileMetadataGrpType = fatcaValidFileNotificationType.getOriginalFileMetadataGrp();
    		        com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMessageSpecGrpType originalFileMessageSpecGrpType = fatcaValidFileNotificationType.getOriginalFileMessageSpecGrp();
    		    	String notificationContentTxt = fatcaValidFileNotificationType.getNotificationContentTxt();
    		    	com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileProcessingDataGrpType originalFileProcessingDataGrpType = fatcaValidFileNotificationType.getOriginalFileProcessingDataGrp();
    		    	String hctaTreatyStampTxt = fatcaValidFileNotificationType.getHCTATreatyStampTxt();
    		    	FATCARecordErrorGrpType fatcaRecordErrorGrpType = fatcaValidFileNotificationType.getFATCARecordErrorGrp();
    		    	String version = fatcaValidFileNotificationType.getVersion();
    		    	
    		    	if(fatcaRecordErrorGrpType != null && fatcaRecordErrorGrpType.getFATCARecordErrorFIGrp().size() > 0){
    		    		PdfPCell validNotificationMessageCell =  getPCell("The transmission for which we have got this Notification was accepted by IRS.", 
    		    				new Font(base, 7f, Font.ITALIC, BaseColor.RED), 5f, 2);
    		    		validNotificationMessageCell.addElement(new Paragraph("But there are "+fatcaRecordErrorGrpType.getFATCARecordErrorFIGrp().size()+
    		    				" error(s) mentioned by IRS. Please check Record Error Group section for error details.", 
    		    				new Font(base, 7f, Font.ITALIC, BaseColor.RED)));
    		    		notificationTable.addCell(validNotificationMessageCell);
    		    	}else{
    		    		PdfPCell validNotificationMessageCell =  getPCell("The transmission for which we have got this Notification was accepted by IRS.", 
    		    				new Font(base, 7f, Font.ITALIC, new CMYKColor(0.86f, 0.00f, 0.60f, 0.45f)), 5f, 2);
    		    		validNotificationMessageCell.addElement(new Paragraph("And there are no error mentioned in this Notification.",
    		    				new Font(base, 7f, Font.ITALIC, new CMYKColor(0.86f, 0.00f, 0.60f, 0.45f))));
    		    		notificationTable.addCell(validNotificationMessageCell);
    		    	}    		        
    		            		        
    		        if(version != null){
    		        	notificationTable.addCell(getPCell("Version", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(version, blackFont, 3f, 1));
    		        }
    		        
    		        if(fatcaNotificationHeaderGrp != null){
    		        	notificationTable.addCell(getPCell("FATCA Notification Header Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFatcaNotificationHeaderGrp(fatcaNotificationHeaderGrp, blackFont, greenFont, redFont));
    		        }
    		        
    		        if(notificationContentTxt != null){
    		        	notificationTable.addCell(getPCell("Notification", blackFont, 3f, 1));
    		        	if(fatcaRecordErrorGrpType != null && fatcaRecordErrorGrpType.getFATCARecordErrorFIGrp().size() > 0){
    		        		notificationTable.addCell(getPCell(notificationContentTxt, redFont, 3f, 1));
    		        	}else{
    		        		notificationTable.addCell(getPCell(notificationContentTxt, greenFont, 3f, 1));
    		        	}
    		        }
    		        
    		        if(hctaTreatyStampTxt != null){
    		        	notificationTable.addCell(getPCell("HCTA Treaty Stamp Text", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(hctaTreatyStampTxt, blackFont, 3f, 1));
    		        }
    		        
    		        if(fatcaRecordErrorGrpType != null){
    		        	notificationTable.addCell(getPCell("Record Error Group", blackFont, 3f, 1));
    		        	
    		        	PdfPCell fatcaRecordErrorGrpParagraph = new PdfPCell();
    		        	List<FATCARecordErrorFIGrpType> fatcaRecordErrorFIGrpList = fatcaRecordErrorGrpType.getFATCARecordErrorFIGrp();
    		        	for(FATCARecordErrorFIGrpType fatcaRecordErrorFIGrp : fatcaRecordErrorFIGrpList){
    		        		PdfPTable pdfPTable = prepareTableForfatcaRecordErrorGrpType(fatcaRecordErrorFIGrp, blackFont, greenFont, redFont, blueFont);
    		        		fatcaRecordErrorGrpParagraph.addElement(pdfPTable);
    		        	}
    		        	
    		        	
    		        	
    		        	PdfPTable fatcaPotentialEffectTable = new PdfPTable(2);
    		        	fatcaPotentialEffectTable.setSpacingBefore(10f);
    		        	fatcaPotentialEffectTable.setWidths(new int[]{20, 80});            
    		        	fatcaPotentialEffectTable.setWidthPercentage(100.0f);
    		        	
    		        	if(fatcaRecordErrorGrpType.getPotentialEffectTxt() != null){
    		        		fatcaPotentialEffectTable.addCell(getPCell("Potential Effect", blackFont, 3f, 1));
    		        		fatcaPotentialEffectTable.addCell(getPCell(fatcaRecordErrorGrpType.getPotentialEffectTxt(), blackFont, 3f, 1));
    		        	}
    		        	
    		        	if(fatcaRecordErrorGrpType.getRecordErrorInfoHeaderTxt() != null){
    		        		fatcaPotentialEffectTable.addCell(getPCell("Record Error Info Header", blackFont, 3f, 1));
    		        		fatcaPotentialEffectTable.addCell(getPCell(fatcaRecordErrorGrpType.getRecordErrorInfoHeaderTxt(), blackFont, 3f, 1));
    		        	}
    		        	
    		        	fatcaRecordErrorGrpParagraph.addElement(fatcaPotentialEffectTable);
    		        	notificationTable.addCell(fatcaRecordErrorGrpParagraph);
    		        }
    		        
    		        if(originalFileProcessingDataGrpType != null){
    		        	notificationTable.addCell(getPCell("Original File Processing Data Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFATCAOriginalFileProcessingDataGrpType(originalFileProcessingDataGrpType, blackFont, greenFont, redFont));
    		        }
    		        
    		        if(originalFileMetadataGrpType != null){
    		        	notificationTable.addCell(getPCell("Original File Metadata Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFATCAOriginalFileMetadataGrpType(originalFileMetadataGrpType, blackFont, greenFont, redFont));
    		        }
    		        
    		        if(originalFileMessageSpecGrpType != null){
    		        	notificationTable.addCell(getPCell("Original File Message Specification Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFATCAOriginalFileMessageSpecGrpType(originalFileMessageSpecGrpType, blackFont, greenFont, redFont));
    		        }
    		        
            	}else{
            		JAXBContext jaxbContext = JAXBContext.newInstance(FATCAFileErrorNotificationType.class);
    		        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
    		        JAXBElement<FATCAFileErrorNotificationType> jaxbElement = 
    		        		jaxbUnmarshaller.unmarshal(new StreamSource(fatcaFileGeneration.getIRSPayloadReadFile()), FATCAFileErrorNotificationType.class);
    		        FATCAFileErrorNotificationType fatcaFileErrorNotificationType = jaxbElement.getValue();
            		
    		        com.quantumdataengines.app.compass.util.fatca.errorfile.FATCANotificationHeaderGrpType fatcaNotificationHeaderGrp = fatcaFileErrorNotificationType.getFATCANotificationHeaderGrp();
    		        com.quantumdataengines.app.compass.util.fatca.errorfile.OriginalFileMetadataGrpType originalFileMetadataGrpType = fatcaFileErrorNotificationType.getOriginalFileMetadataGrp();
    		        com.quantumdataengines.app.compass.util.fatca.errorfile.ActionRequestedGrpType actionRequestedGrpType = fatcaFileErrorNotificationType.getActionRequestedGrp();
    		    	String notificationContentTxt = fatcaFileErrorNotificationType.getNotificationContentTxt();
    		    	String hctaTreatyStampTxt = fatcaFileErrorNotificationType.getHCTATreatyStampTxt();
    		    	String version = fatcaFileErrorNotificationType.getVersion();
    		        
    		        notificationTable.addCell(getPCell("The transmission for which we have got this Notification was not accepted by IRS.", 
    		        		new Font(base, 7f, Font.ITALIC, BaseColor.RED), 5f, 2));
    		        
    		        if(version != null){
    		        	notificationTable.addCell(getPCell("Version", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(version, blackFont, 3f, 1));
    		        }
    		        
    		        if(fatcaNotificationHeaderGrp != null){
    		        	notificationTable.addCell(getPCell("FATCA Notification Header Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFatcaNotificationHeaderGrp(fatcaNotificationHeaderGrp, blackFont, greenFont, redFont));
    		        }
    		        
    		        if(notificationContentTxt != null){
    		        	notificationTable.addCell(getPCell("Notification", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(notificationContentTxt, redFont, 3f, 1));
    		        }
    		        
    		        if(hctaTreatyStampTxt != null){
    		        	notificationTable.addCell(getPCell("HCTA Treaty Stamp Text", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(hctaTreatyStampTxt, blackFont, 3f, 1));
    		        }
    		        
    		        if(actionRequestedGrpType != null){
    		        	notificationTable.addCell(getPCell("Action Requested", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(actionRequestedGrpType.getActionRequestedTxt(), greenFont, 3f, 1));
    		        }
    		        
    		        if(actionRequestedGrpType != null){
    		        	notificationTable.addCell(getPCell("Due Date", blackFont, 3f, 1));
    		        	notificationTable.addCell(getPCell(actionRequestedGrpType.getActionRequestedDueDateTxt(), blueFont, 3f, 1));
    		        }
    		        
    		        if(originalFileMetadataGrpType != null){
    		        	notificationTable.addCell(getPCell("Original File Metadata Group", blackFont, 3f, 1));
    		        	notificationTable.addCell(prepareTableForFATCAOriginalFileMetadataGrpType(originalFileMetadataGrpType, blackFont, greenFont, redFont));
    		        }
            	}            	
            }else{
            	PdfPCell errorNotificationMessageCell = getPCell("IRS Notification couldn't be read.", new Font(base, 7f, Font.ITALIC, BaseColor.RED), 5f, 2);
            	notificationTable.addCell(errorNotificationMessageCell);
            }
            
            document.add(notificationTable);            
		}catch(Exception e){
			e.printStackTrace();
		}finally{
	         try {
	        	 document.close();
	        	 file.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private PdfPTable prepareTableForFATCAOriginalFileMessageSpecGrpType(OriginalFileMessageSpecGrpType originalFileMessageSpecGrpType, Font blackFont, Font greenFont, Font redFont) throws Exception{
		PdfPTable originalFileMessageSpecTable = new PdfPTable(2);
		originalFileMessageSpecTable.setSpacingBefore(10f);
		originalFileMessageSpecTable.setWidths(new int[]{30, 70});            
		originalFileMessageSpecTable.setWidthPercentage(100.0f);
		
		if(originalFileMessageSpecGrpType.getMessageRefId() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Message Reference ID", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getMessageRefId(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getCorrMessageRefId() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Correct Message Reference ID", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getCorrMessageRefId(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getMessageTypeCd() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Message Type Code", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getMessageTypeCd().value(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getSendingCompanyGIIN() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Sender GIIN", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getSendingCompanyGIIN(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getTransmittingCountryCd() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Sender Country Code", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getTransmittingCountryCd().value(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getReceivingCountryCd() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Transmitting Country Code", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(originalFileMessageSpecGrpType.getReceivingCountryCd().value(), blackFont, 3f, 1));
		}
		if(originalFileMessageSpecGrpType.getReportingPeriodDt() != null){			
			originalFileMessageSpecTable.addCell(getPCell("Reporting Period", blackFont, 3f, 1));
			originalFileMessageSpecTable.addCell(getPCell(toDate(originalFileMessageSpecGrpType.getReportingPeriodDt()), blackFont, 3f, 1));
		}
		
		return originalFileMessageSpecTable;
	}
	
	private PdfPTable prepareTableForFATCAOriginalFileMetadataGrpType(Object object, Font blackFont, Font greenFont, Font redFont) throws Exception{
		PdfPTable originalFileMetadataTable = new PdfPTable(2);
		originalFileMetadataTable.setSpacingBefore(10f);
		originalFileMetadataTable.setWidths(new int[]{30, 70});            
		originalFileMetadataTable.setWidthPercentage(100.0f);
		
		if(object instanceof com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMetadataGrpType){
			com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMetadataGrpType  originalFileMetadataGrpType = 
					(com.quantumdataengines.app.compass.util.fatca.validfile.OriginalFileMetadataGrpType) object;
			if(originalFileMetadataGrpType.getIDESTransmissionId() != null){			
				originalFileMetadataTable.addCell(getPCell("IDES Transmission ID", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getIDESTransmissionId(), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getIDESSendingTs() != null){			
				originalFileMetadataTable.addCell(getPCell("IDES Sending Time", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(changeDateFormat(originalFileMetadataGrpType.getIDESSendingTs(), "yyyy-MM-dd'T'hh:mm:ss.SSS'Z'"), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getSenderFileId() != null){			
				originalFileMetadataTable.addCell(getPCell("Sender File ID", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getSenderFileId(), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getUncompressedFileSizeKBQty() != null){			
				originalFileMetadataTable.addCell(getPCell("Uncompressed File Size", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getUncompressedFileSizeKBQty()+" KB", blackFont, 3f, 1));
			}
		}else{
			com.quantumdataengines.app.compass.util.fatca.errorfile.OriginalFileMetadataGrpType  originalFileMetadataGrpType = 
					(com.quantumdataengines.app.compass.util.fatca.errorfile.OriginalFileMetadataGrpType) object;
			if(originalFileMetadataGrpType.getIDESTransmissionId() != null){			
				originalFileMetadataTable.addCell(getPCell("IDES Transmission ID", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getIDESTransmissionId(), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getIDESSendingTs() != null){			
				originalFileMetadataTable.addCell(getPCell("IDES Sending Time", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(changeDateFormat(originalFileMetadataGrpType.getIDESSendingTs(), "yyyy-MM-dd'T'hh:mm:ss.SSS'Z'"), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getSenderFileId() != null){			
				originalFileMetadataTable.addCell(getPCell("Sender File ID", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getSenderFileId(), blackFont, 3f, 1));
			}
			if(originalFileMetadataGrpType.getUncompressedFileSizeKBQty() != null){			
				originalFileMetadataTable.addCell(getPCell("Uncompressed File Size", blackFont, 3f, 1));
				originalFileMetadataTable.addCell(getPCell(originalFileMetadataGrpType.getUncompressedFileSizeKBQty()+" KB", blackFont, 3f, 1));
			}
		}
		return originalFileMetadataTable;
	}
	
	private PdfPTable prepareTableForFATCAOriginalFileProcessingDataGrpType(OriginalFileProcessingDataGrpType dataGrpType, Font blackFont, Font greenFont, Font redFont) throws Exception{
		PdfPTable originalFileProcessingDataTable = new PdfPTable(2);
		originalFileProcessingDataTable.setSpacingBefore(10f);
		originalFileProcessingDataTable.setWidths(new int[]{30, 70});            
		originalFileProcessingDataTable.setWidthPercentage(100.0f);
		
		if(dataGrpType.getFileTypeCd() != null){
			originalFileProcessingDataTable.addCell(getPCell("File Type Code", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getFileTypeCd().value(), blackFont, 3f, 1));
		}
		if(dataGrpType.getFinancialInstitutionCnt() != null){
			originalFileProcessingDataTable.addCell(getPCell("Financial Institution Count", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getFinancialInstitutionCnt().toString(), blackFont, 3f, 1));
		}
		if(dataGrpType.getRecordCnt() != null){
			originalFileProcessingDataTable.addCell(getPCell("Record Count", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getRecordCnt().toString(), blackFont, 3f, 1));
		}
		if(dataGrpType.getNonDupAccountReportRecordCnt() != null){
			originalFileProcessingDataTable.addCell(getPCell("Account Report Record Count", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getNonDupAccountReportRecordCnt().toString(), blackFont, 3f, 1));
		}
		if(dataGrpType.getDupAccountReportRecordCnt() != null){
			originalFileProcessingDataTable.addCell(getPCell("Duplicate Account Report Record Count", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getDupAccountReportRecordCnt().toString(), blackFont, 3f, 1));
		}
		if(dataGrpType.getPooledReportRecordCnt() != null){
			originalFileProcessingDataTable.addCell(getPCell("Pool Report Record Count", blackFont, 3f, 1));
			originalFileProcessingDataTable.addCell(getPCell(dataGrpType.getPooledReportRecordCnt().toString(), blackFont, 3f, 1));
		}
		
		return originalFileProcessingDataTable;
	}
	
	private PdfPTable prepareTableForfatcaRecordErrorGrpType(FATCARecordErrorFIGrpType errorFIGrpType, Font blackFont, Font greenFont, Font redFont, Font blueFont) throws Exception{
		PdfPTable fatcaRecordErrorGrpTable = new PdfPTable(2);
		fatcaRecordErrorGrpTable.setSpacingBefore(10f);
		fatcaRecordErrorGrpTable.setWidths(new int[]{20, 80});            
		fatcaRecordErrorGrpTable.setWidthPercentage(100.0f);
			
		if(errorFIGrpType.getReportingFINm() != null){
			fatcaRecordErrorGrpTable.addCell(getPCell("Reporting FI", blackFont, 3f, 1));
			fatcaRecordErrorGrpTable.addCell(getPCell(errorFIGrpType.getReportingFINm()+" ("+errorFIGrpType.getReportingFIGIIN()+")", blackFont, 3f, 1));
		}
		
		if(errorFIGrpType.getSponsorNm() != null){
			fatcaRecordErrorGrpTable.addCell(getPCell("Sponsor", blackFont, 3f, 1));
			fatcaRecordErrorGrpTable.addCell(getPCell(errorFIGrpType.getSponsorNm()+" ("+errorFIGrpType.getSponsorGIIN()+")", blackFont, 3f, 1));
		}
		
		if(errorFIGrpType.getFATCARecordErrorDetailGrp() != null){
			fatcaRecordErrorGrpTable.addCell(getPCell("Record Level Error", blackFont, 3f, 1));
			PdfPCell fatcaRecordErrorDetailParagraph = new PdfPCell();
			fatcaRecordErrorDetailParagraph.setPadding(0);
			List<FATCARecordErrorDetailGrpType> fatcaRecordErrorDetailList = errorFIGrpType.getFATCARecordErrorDetailGrp();
			for(FATCARecordErrorDetailGrpType fatcaRecordErrorDetail : fatcaRecordErrorDetailList){
				PdfPTable pdfPTable = prepareTableForFATCARecordErrorDetailGrpType(fatcaRecordErrorDetail, blackFont, greenFont, redFont, blueFont);
				fatcaRecordErrorDetailParagraph.addElement(pdfPTable);
			}
			fatcaRecordErrorGrpTable.addCell(fatcaRecordErrorDetailParagraph);
		}
		
		return fatcaRecordErrorGrpTable;
	}
	
	private PdfPTable prepareTableForFATCARecordErrorDetailGrpType(FATCARecordErrorDetailGrpType fatcaRecordErrorDetail, Font blackFont, Font greenFont, Font redFont, Font blueFont) throws Exception{
		PdfPTable fatcaRecordErrorTable = new PdfPTable(2);
		fatcaRecordErrorTable.setSpacingBefore(10f);
		fatcaRecordErrorTable.setWidths(new int[]{30, 70});            
		fatcaRecordErrorTable.setWidthPercentage(100.0f);
		
		if(fatcaRecordErrorDetail.getDocRefId() != null){
			fatcaRecordErrorTable.addCell(getPCell("Document Reference ID", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getDocRefId(), blackFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getDocTypeIndicCd() != null){
			fatcaRecordErrorTable.addCell(getPCell("Document Type Code", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getDocTypeIndicCd().value(), blackFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getCorrDocRefId() != null){
			fatcaRecordErrorTable.addCell(getPCell("Correct Document Reference ID", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getCorrDocRefId(), blackFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getCorrMessageRefId() != null){
			fatcaRecordErrorTable.addCell(getPCell("Correct Message Reference ID", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getCorrMessageRefId(), blackFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getRecordLevelErrorCd() != null){
			fatcaRecordErrorTable.addCell(getPCell("Record Level Error Code", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getRecordLevelErrorCd(), blackFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getFATCAReportTypeCd() != null){
			fatcaRecordErrorTable.addCell(getPCell("FATCA Report Type Code", blackFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getFATCAReportTypeCd().value(), blackFont, 3f, 1));
		}
		
		//list
		if(fatcaRecordErrorDetail.getFieldErrorGrp() != null){
			List<FieldErrorGrpType> errorGrpList =  fatcaRecordErrorDetail.getFieldErrorGrp();
			for(FieldErrorGrpType errorGrp : errorGrpList){				
				fatcaRecordErrorTable.addCell(getPCell("Field Level Error", redFont, 3f, 1));
				
				Paragraph fieldErrorParagraph = new Paragraph();
				fieldErrorParagraph.setFont(redFont);
				
				if(errorGrp.getFieldNm() != null){
					fieldErrorParagraph.add("Field Name : "+errorGrp.getFieldNm());
				}
				if(errorGrp.getFieldErrorTxt() != null){
					fieldErrorParagraph.add("Error Text : "+errorGrp.getFieldErrorTxt());
				}
				if(errorGrp.getFieldErrorCd() != null){
					fieldErrorParagraph.add("Error Code : "+errorGrp.getFieldErrorCd());
				}
				if(errorGrp.getFieldLineNum() != null){
					fieldErrorParagraph.add("Line Number : "+errorGrp.getFieldLineNum());
				}
				if(errorGrp.getFieldPartNum() != null){
					fieldErrorParagraph.add("Part Number : "+errorGrp.getFieldPartNum());
				}
				
				fatcaRecordErrorTable.addCell(fieldErrorParagraph);
			}
		}
		
		if(fatcaRecordErrorDetail.getActionRequestedGrp() != null){
			fatcaRecordErrorTable.addCell(getPCell("Action Requested", greenFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getActionRequestedGrp().getActionRequestedTxt(), greenFont, 3f, 1));
		}
		
		if(fatcaRecordErrorDetail.getActionRequestedGrp() != null){
			fatcaRecordErrorTable.addCell(getPCell("Due Date", blueFont, 3f, 1));
			fatcaRecordErrorTable.addCell(getPCell(fatcaRecordErrorDetail.getActionRequestedGrp().getActionRequestedDueDateTxt(), blueFont, 3f, 1));
		}
		
		return fatcaRecordErrorTable;
	}
	
	private PdfPTable prepareTableForFatcaNotificationHeaderGrp(Object obejct, Font blackFont, Font greenFont, Font redFont) throws Exception{
		PdfPTable notificationHeaderGrpTable = new PdfPTable(2);
		notificationHeaderGrpTable.setSpacingBefore(10f);
		notificationHeaderGrpTable.setWidths(new int[]{30, 70});            
		notificationHeaderGrpTable.setWidthPercentage(100.0f);
		
		if(obejct instanceof com.quantumdataengines.app.compass.util.fatca.validfile.FATCANotificationHeaderGrpType){
			com.quantumdataengines.app.compass.util.fatca.validfile.FATCANotificationHeaderGrpType  fatcaNotificationHeaderGrp = 
					(com.quantumdataengines.app.compass.util.fatca.validfile.FATCANotificationHeaderGrpType) obejct;
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationCreateTs() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Create On", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(changeDateFormat(fatcaNotificationHeaderGrp.getFATCANotificationCreateTs(), "yyyy-MM-dd'T'hh:mm:ss'Z'"), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationRefId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Reference ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCANotificationRefId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationCd() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Code", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCANotificationCd().value(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCAEntitySenderId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Sender ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCAEntitySenderId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCAEntityReceiverId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Receiver ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCAEntityReceiverId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getCopiedToFATCAEntityId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Copied To FATCA Entity ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getCopiedToFATCAEntityId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getContactInformationTxt() != null){
				notificationHeaderGrpTable.addCell(getPCell("Contact Information", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getContactInformationTxt(), blackFont, 3f, 1));
			}
		}else{
			com.quantumdataengines.app.compass.util.fatca.errorfile.FATCANotificationHeaderGrpType  fatcaNotificationHeaderGrp = 
					(com.quantumdataengines.app.compass.util.fatca.errorfile.FATCANotificationHeaderGrpType) obejct;
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationCreateTs() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Create On", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(changeDateFormat(fatcaNotificationHeaderGrp.getFATCANotificationCreateTs(), "yyyy-MM-dd'T'hh:mm:ss'Z'"), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationRefId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Reference ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCANotificationRefId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCANotificationCd() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Code", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCANotificationCd().value(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCAEntitySenderId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Sender ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCAEntitySenderId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getFATCAEntityReceiverId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Notification Receiver ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getFATCAEntityReceiverId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getCopiedToFATCAEntityId() != null){
				notificationHeaderGrpTable.addCell(getPCell("Copied To FATCA Entity ID", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getCopiedToFATCAEntityId(), blackFont, 3f, 1));
			}
			
			if(fatcaNotificationHeaderGrp.getContactInformationTxt() != null){
				notificationHeaderGrpTable.addCell(getPCell("Contact Information", blackFont, 3f, 1));
				notificationHeaderGrpTable.addCell(getPCell(fatcaNotificationHeaderGrp.getContactInformationTxt(), blackFont, 3f, 1));
			}
		}
		return notificationHeaderGrpTable;
	}
}
